# Boost.Context Library Tests Jamfile

#          Copyright Oliver Kowalke 2009.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import feature ;
import indirect ;
import modules ;
import os ;
import testing ;
import toolset ;

project boost/context/test
    : requirements
        <library>../../test/build//boost_unit_test_framework
        <library>/boost/context//boost_context
        <link>static
    ;

if [ os.name ] = NT
{
    CP = copy /y ;
    TO = $(BOOST_ROOT)\\boost\\context\\context.hpp ;
}
else
{
    CP = cp ;
    TO = $(BOOST_ROOT)/boost/context/context.hpp ;
}

actions copy-context_header
{
    $(CP) $(>) $(TO)
}

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>aapcs
     <architecture>arm
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>n32
     <architecture>mips1
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>o32
     <architecture>mips1
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>n64
     <architecture>mips1
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>o64
     <architecture>mips1
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>eabi
     <address-model>32
     <architecture>power
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>32
     <architecture>power
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>eabi
     <address-model>64
     <architecture>power
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>64
     <architecture>power
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>32
     <architecture>x86
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>32
     <architecture>x86
     <binary-format>elf
     <context-impl>asm
     <toolset>intel
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>elf
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>elf
     <context-impl>asm
     <toolset>intel
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>32
     <architecture>x86
     <binary-format>mach-o
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_posix.hpp
   : <abi>sysv
     <address-model>64
     <architecture>x86
     <binary-format>mach-o
     <context-impl>asm
     <toolset>gcc
   ;

alias context_header
   : ../src/impl/context_fcontext_windows32.hpp
   : <abi>ms
     <address-model>32
     <architecture>x86
     <binary-format>pe
     <target-os>windows
     <context-impl>asm
     <toolset>msvc
   ;

alias context_header
   : ../src/impl/context_fcontext_windows32.hpp
   : <abi>ms
     <address-model>32
     <architecture>x86
     <binary-format>pe
     <target-os>windows
     <context-impl>asm
     <toolset>intel
   ;

alias context_header
   : ../src/impl/context_fcontext_windows64.hpp
   : <abi>ms
     <address-model>64
     <architecture>x86
     <binary-format>pe
     <context-impl>asm
     <target-os>windows
     <toolset>msvc
   ;

alias context_header
   : ../src/impl/context_fcontext_windows64.hpp
   : <abi>ms
     <address-model>64
     <architecture>x86
     <binary-format>pe
     <context-impl>asm
     <target-os>windows
     <toolset>intel
   ;

alias context_header
   : ../src/impl/context_fiber.hpp
   : <context-impl>native
     <target-os>windows
   ;

alias context_header
    : ../src/impl/context_ucontext.hpp
    : <context-impl>native
    ;

explicit context_header ;

make context.hpp
    : context_header
    : @copy-context_header
    ; 

test-suite "context" :
    [ run test_protected_stack.cpp : : : <dependency>context.hpp ]
    [ run test_context.cpp : : : <dependency>context.hpp ]
    ;
